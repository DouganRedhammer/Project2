//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.02.21 at 05:33:24 PM PST 
//


package generated;

import hibernateClasses.HibernateContext;
import java.io.File;
import java.math.BigInteger;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Order;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://www.cs.sjsu.edu/cs157b/Composer}composerId"/>
 *         &lt;element ref="{http://www.cs.sjsu.edu/cs157b/Composer}composerName"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "composerId",
    "composerName"
})
@XmlRootElement(name = "composer")
@Entity
public class Composer {

    @XmlElement(required = true)
    protected long composerId;
    @XmlElement(required = true)
    protected String composerName;

    /**
     * Gets the value of the composerId property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
        @Id
    @GeneratedValue
    @Column(name="id")
    public long getComposerId() {
        return composerId;
    }

    /**
     * Sets the value of the composerId property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setComposerId(long value) {
        this.composerId = value;
    }

    /**
     * Gets the value of the composerName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
     @Column(name="name")
    public String getComposerName() {
        return composerName;
    }

    /**
     * Sets the value of the composerName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setComposerName(String value) {
        this.composerName = value;
    }
    public static void load()
    {
 
        ComposerTable composerTbl;
        List<Composer> composers;
   
   try {
            JAXBContext jaxbContext =  JAXBContext.newInstance("generated"); 
            Unmarshaller unMarshaller = jaxbContext.createUnmarshaller();
    
            composerTbl = (ComposerTable)unMarshaller.unmarshal(new File("composer.xml"));
            composers = composerTbl.getComposer();

        
        Session session = HibernateContext.getSession();
        
        Transaction tx = session.beginTransaction();
        {
            for(Composer composer: composers)
                session.save(composer);
        }
        tx.commit();
        session.close();

        System.out.println("Composer XML loaded.");
            
        } catch (JAXBException ex) {
            Logger.getLogger(Album.class.getName()).log(Level.SEVERE, null, ex);
        }
            
            
    }
     public static void list()
    {  
        Session session = HibernateContext.getSession();
        Criteria criteria = session.createCriteria(Composer.class);
        //criteria.addOrder(Order.asc("name"));
        criteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);
       
        List<Composer> composerList = criteria.list();       
        System.out.println("All composers in the muisc library:");      

        for (Composer composer : composerList) 
        {
            System.out.println(composer.getComposerName());
        }
        
        session.close();
    }
}
